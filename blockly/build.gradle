plugins {
  id 'antlr'
}

repositories {
  mavenCentral()
}

dependencies {
  implementation project(':dungeon'), 'com.github.javaparser:javaparser-symbol-solver-core:3.26.4'

  // ANTLR version 4 for DSL Grammar
  antlr supportDependencies.antlr

  // JUnit 4 and Mockito for testing
  testImplementation supportDependencies.junit
  testRuntimeOnly supportDependencies.junitLauncher
}

sourceSets.main.java.srcDirs = ['src/', "$buildDir/generated-src/"]
sourceSets.main.resources.srcDirs = ['assets/']

sourceSets.test.java.srcDirs = ['test/']

processResources {
    from new File(project(':game').projectDir, '/assets')
    from new File(project(':dungeon').projectDir, '/assets')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourceSets.main.antlr.srcDirs = ['src']

// generate ANTLR visitor and listener classes from grammar
generateGrammarSource {
  maxHeapSize = '64m'
  arguments += ['-visitor', '-listener', '-long-messages']
}


tasks.register('runBlockly', JavaExec) {
    mainClass = 'client.Client'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runPathFindingComparison', JavaExec) {
    mainClass = 'starter.ComparePathfindingStarter'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('buildBlocklyJar', Jar) {
    dependsOn ':game:jar', ':dungeon:jar'
    archiveBaseName = 'Blockly'
    from sourceSets.main.output
    from project(':game').sourceSets.main.output
    from project(':dungeon').sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Include source files from Language Server
    from(project(':game').projectDir) {
        include 'src/core/level/utils/LevelElement.java'
        // Remove 'src/' prefix from paths
        eachFile { file ->
            file.path = file.path.replaceFirst('src/', '')
        }
        includeEmptyDirs = false
    }
    from(projectDir) {
        include 'src/utils/Direction.java'
        include 'src/utils/BlocklyCommands.java'
        // Remove 'src/' prefix from paths
        eachFile { file ->
            file.path = file.path.replaceFirst('src/', '')
        }
        includeEmptyDirs = false
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'client.Client'
    }

    archiveFileName = 'Blockly.jar'

    into('assets') {
        from new File(project(':game').projectDir, '/assets')
        from new File(project(':dungeon').projectDir, '/assets')
    }

    exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

tasks.named('test', Test) {
    useJUnitPlatform()
}
