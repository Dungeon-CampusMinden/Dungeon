/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

sourceSets.main.java.srcDirs = ['src/']
sourceSets.main.resources.srcDirs = ['assets/']

sourceSets.test.java.srcDirs = ['test/']
sourceSets.test.resources.srcDirs = ['test_resources/']

dependencies {
  implementation project(':dungeon')

  // This dependency is used by the application.
  implementation 'com.google.guava:guava:32.1.3-jre'

  implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.22.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

application {
  // Define the main class for the application.
  mainClass = 'main.Main'
}

// Define a task to modify the startup script
task modifyStartupScript {
  dependsOn installDist
  description = 'Modifies the startup script to enable remote debugging'

  doLast {
    def binDir = "${installDist.destinationDir}/bin"
    def startupScript = file("${binDir}/dungeon-lsp")

    if (startupScript.exists()) {
      println "Modifying startup script..."
      //println startupScript.text

      def content = startupScript.text
      // Split the content into lines
      def lines = content.tokenize('\n')

      // Find the index of the first line containing the shebang
      def shebangIndex = lines.findIndexOf { line -> line.startsWith('#!/bin/sh') }

      // Insert the modification after the shebang line
      if (shebangIndex != -1) {
        def lineAfterShebang = lines.get(shebangIndex + 1)
        if (lineAfterShebang.startsWith("export JAVA_OPTS")) {
          println "'export JAVA_OPTS' found in script, won't modify the script"
        } else {
          lines.add(shebangIndex + 1, 'export JAVA_OPTS="$JAVA_OPTS -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"')
        }
      } else {
        println "Shebang line not found. Won't modify script!"
      }

      // Join the modified lines back into a single string
      content = lines.join('\n')

      // Write the modified content back to the startup script
      startupScript.text = content
    } else {
      throw new GradleException("Startup script not found: $startupScript")
    }
  }
}

// Ensure that the modifyStartupScript task is executed after installDist
//installDist.finalizedBy modifyStartupScript
