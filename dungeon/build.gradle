plugins {
    id 'java-library'
}


dependencies {
    // LibGDX: expose this API to users because of core.level.elements.ILevel
    api supportDependencies.gdx
    api supportDependencies.gdx_platform
    api supportDependencies.gdx_backend_lwjgl3
    api supportDependencies.gdx_lwjgl3_glfw_awt_macos
    api supportDependencies.gdx_ai
    api supportDependencies.gdx_freetype
    api supportDependencies.gdx_freetype_platform

    // JUnit and Mockito for testing
    testImplementation supportDependencies.junit
    testRuntimeOnly supportDependencies.junitLauncher
    testImplementation supportDependencies.mockito_core
}


sourceSets.main.java.srcDirs = ['src/']
sourceSets.main.resources.srcDirs = ['assets/']

sourceSets.test.java.srcDirs = ['test/']
sourceSets.test.resources.srcDirs = ['test_resources/']

// create our Starter.jar
tasks.register('buildDungeonJar', Jar) {
    group 'jar'
    manifest {
        attributes 'Main-Class': 'starter.Starter'
    }
    archiveFileName = 'Starter.jar'

    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*module-info.class'
}

tasks.register('runBasicStarter', JavaExec) {
    group 'starter'
    mainClass = 'starter.BasicStarter'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('debugBasicStarter', JavaExec) {
    group 'starter'
    mainClass = 'starter.BasicStarter'
    classpath = sourceSets.main.runtimeClasspath
    debug = true
}

tasks.named('test', Test) {
    useJUnitPlatform()
}
