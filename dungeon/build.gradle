import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java-library'
    id 'antlr'
}

dependencies {
    api project(":game")

    testImplementation supportDependencies.junit
    testImplementation supportDependencies.mockito_core

    // ANTLR version 4 for DSL Grammar
    antlr supportDependencies.antlr
}

sourceSets.main.java.srcDirs = ["src/", "$projectDir/build/generated-src/antlr/main/"]
sourceSets.test.java.srcDirs = ["test/"]
sourceSets.main.resources.srcDirs = ["assets/"]
sourceSets.test.resources.srcDirs = ["test_resources/", "assets/"]
sourceSets.main.antlr.srcDirs = ["src/dsl/antlr"]


// generate ANTLR visitor and listener classes from grammar
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-listener" ]
}

tasks.register('start', JavaExec) {
    mainClass = "starter.Starter"
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('starterJar', org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': "starter/Starter"
    }

    archiveFileName = 'Starter.jar'

    from sourceSets.main.output

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', "META-INF/*module-info.class"
}

tasks.register('runManualQuizTest', JavaExec) {
    mainClass = "manual.quizquestion.QuizQuestionUITest"
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('runCallbackTest', JavaExec) {
    mainClass = "manual.quizquestion.CallbackTest"
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('runTaskGenerationTest', JavaExec) {
    mainClass = "manual.taskgeneration.TaskGenerationTest"
    classpath = sourceSets.test.runtimeClasspath
}

tasks.withType(JavaCompile).configureEach {
    configure(options) {
        options.compilerArgs << '-parameters'
    }
}
