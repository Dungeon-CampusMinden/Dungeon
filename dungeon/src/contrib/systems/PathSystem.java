package contrib.systems;

import contrib.components.PathComponent;
import contrib.utils.components.ai.AIUtils;
import core.Entity;
import core.System;

/**
 * The PathSystem is responsible for moving entities along a path. It fetches the {@link
 * PathComponent} of each entity and moves the entity along the path. The path is generated by the
 * {@link contrib.systems.AISystem}, which uses the {@link AIUtils} class to calculate the path.
 *
 * <p>If {@link contrib.entities.HeroFactory#ENABLE_MOUSE_MOVEMENT} is set to true, this handles the
 * mouse movement of the hero, by using pathfinding to calculate the path to the mouse click.
 *
 * @see PathComponent
 * @see AIUtils
 */
public class PathSystem extends System {

  /**
   * The constructor for the PathSystem class. It creates a new System with a component filter for
   * {@link PathComponent}.
   */
  public PathSystem() {
    super(PathComponent.class);
  }

  /**
   * The execute method is responsible for moving the entity along the path. It fetches the
   * PathComponent of the entity and throws an exception if it is missing. If the path is null or
   * has no elements, the method returns without doing anything. Otherwise, it moves the entity
   * along the path and updates the time since the last update.
   */
  @Override
  public void execute() {
    filteredEntityStream(PathComponent.class)
        .map(e -> new PSData(e, e.fetch(PathComponent.class).orElseThrow()))
        .filter(psd -> psd.pathComponent.isValid())
        .forEach(psd -> AIUtils.move(psd.entity, psd.pathComponent.path()));
  }

  private record PSData(Entity entity, PathComponent pathComponent) {}
}
