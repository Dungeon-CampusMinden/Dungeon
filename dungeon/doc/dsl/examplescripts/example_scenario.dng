// ----------------------------- AUFGABENDEFINITION ----------------------------
single_choice_task my_task {
    description: "Bitte suchen Sie die eine richtige Ausage:",
    answers: [
    "Man kann auf den Betriebssystemen Windows, MACOS und Linux in Python programmieren.",
    "Man kann auf externen Datenträgern schnell sortieren.",
    "Schlüsselfelder eignen sich nicht zum Indizieren von Daten."
    ],
    correct_answer_index: 0
}

graph dependencies {
    my_task;
}

dungeon_config config {
    dependency_graph: dependencies
}
// ----------------------------- AUFGABENDEFINITION ----------------------------

// ---------------------------- ITEM TYP DEFINITION ----------------------------
item_type scroll_type {
    texture_path: "items/book/wisdom_scroll.png"
}
// -------------------------- ENDE ITEM TYP DEFINITION -------------------------

// --------------------------- ENTITÄTSTYP DEFINITION --------------------------
entity_type chest_type {
    inventory_component {},
    draw_component {
        path: "objects/treasurechest"
    },
    position_component{},
    interaction_component{
        radius: 1.5,
        on_interaction: open_container
    },
    task_content_component{}
}

entity_type knight_type {
    draw_component {
        path: "character/blue_knight"
    },
    hitbox_component {},
    position_component{},
    interaction_component{
        radius: 1.5
    },
    task_component{}
}
// ------------------------- ENDE ENTITÄTSTYP DEFINITION ------------------------

// --------------------------- EVENT-HANDLER DEFINITION -------------------------
fn ask_task_finished(entity knight, entity who) {
    var my_task : task;
    my_task =  knight.task_component.task;
    if my_task.is_active() {
        ask_task_yes_no(my_task);
    } else {
        show_info("Du hast die Aufgabe schon bearbeitet.");
    }
}

fn open_container(entity chest, entity who) {
    chest.inventory_component.open(who);
}
// ------------------------ ENDE EVENT-HANDLER DEFINITION -----------------------

// ------------------------- SZENARIO-BUILDER DEFINITION ------------------------
fn build_task(single_choice_task t) -> entity<><> {
    // Szenario-spezifische Beschreibung setzen
    t.set_scenario_text("Platziere die richtige Schriftrolle in der Quest-Truhe");

    // Erzeugung der Entitätsmengen
    var return_set : entity<><>;
    var room_set : entity<>;

    // Erstellung der Items aus den Antwortmöglichkeiten
    for task_content content in t.get_content() {
        var item : entity;
        item = build_quest_item(scroll_type, content);

        // Platzierung eines Items in der Entitätsmenge
        place_quest_item(item, room_set);
    }

    // Erstellung der Aufgaben-Truhe, in welche die Antworten abgegeben werden sollen
    var chest : entity;
    chest = instantiate(chest_type);

    // Markierung der Aufgaben-Truhe als Task-Container
    chest.mark_as_task_container(t, "Quest-Truhe");
    room_set.add(chest);

    // Festlegung der Antwort-Auswahl-Funktion
    t.set_answer_picker_function(answer_picker_single_chest);

    // Erstellung der Aufgaben-Manager-Entität
    var knight : entity;
    knight = instantiate_named(knight_type, "Aufgabengeber");
    room_set.add(knight);

    // Verknüpfung der Aufgabe mit der Manager-Entität
    knight.task_component.task = t;

    // Setzen der Event-Handler-Funktion für Interaktion mit der Manager-Entität
    knight.interaction_component.on_interaction = ask_task_finished;

    return_set.add(room_set);
    return return_set;
}
// ----------------------- ENDE SZENARIO-BUILDER DEFINITION ----------------------
