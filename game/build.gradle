import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.5/samples
 */

plugins {
    id 'java'
    id 'java-library'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral();
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" };
    gradlePluginPortal();
    google();
}

dependencies {
    // LibGDX
    api "com.badlogicgames.gdx:gdx:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    api "com.badlogicgames.gdx:gdx-ai:$aiVersion"

    //DSL Annotations
    implementation project(":dsl")

    // JUnit 4, Mockito and Powermock for testing:
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:5.8.0"

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation "com.google.code.gson:gson:$gsonVersion"
}

// store name of method parameter names in .class files (used to build
// DSL-adapter types, which contain the names of the parameters as members)
tasks.withType(JavaCompile) {
    configure(options) {
        options.compilerArgs << '-parameters'
    }
}


sourceSets.main.java.srcDirs = ["src/"]
sourceSets.test.java.srcDirs = ["test/"]
sourceSets.main.resources.srcDirs = ["assets/"]
sourceSets.test.resources.srcDirs = ["test_resources/"]

tasks.register('run', JavaExec) {
    mainClass = "starter.RoomBasedDungeon"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        jvmArgs("-XstartOnFirstThread")
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)

    }
}

tasks.register('debug', JavaExec) {
    dependsOn 'classes'
    mainClass = "starter.RoomBasedDungeon"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    debug = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        jvmArgs("-XstartOnFirstThread")
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

tasks.register('runRandomDungeon', JavaExec) {
    mainClass = "starter.RandomDungeon"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        jvmArgs("-XstartOnFirstThread")
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

tasks.register('debugRandomDungeon', JavaExec) {
    dependsOn 'classes'
    mainClass = "starter.RandomDungeon"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    debug = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        jvmArgs("-XstartOnFirstThread")
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

tasks.register('runYesNoDialogTest', JavaExec) {
    dependsOn 'classes'
    mainClass = "manual.YesNoDialogTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        jvmArgs("-XstartOnFirstThread")
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

tasks.register('jarRandomDungeon', org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'starter.RandomDungeon'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', "META-INF/*module-info.class"
}

tasks.register('jarRoomBasedDungeon', org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'starter.RoomBasedDungeon'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', "META-INF/*module-info.class"
}
