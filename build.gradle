plugins {
    id 'application'
    id 'com.diffplug.spotless' version '6.23.3'
    id 'antlr'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
}

// store name of method parameter names in .class files (used to build
// DSL-adapter types, which contain the names of the parameters as members)
tasks.withType(JavaCompile).configureEach {
    configure(options) {
        options.compilerArgs << '-parameters'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    gradlePluginPortal()
    google()
}

def gdxVersion = '1.12.1'
def aiVersion = '1.8.2'
def junitVersion = '4.13.2'
def mockitoVersion = '5.8.0'
def antlrVersion = '4.13.1'
def gsonVersion = '2.10.1'

dependencies {
    // LibGDX
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-ai:$aiVersion"

    // Gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    // JUnit 4 and Mockito for testing
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    // ANTLR version 4 for DSL Grammar
    antlr "org.antlr:antlr4:$antlrVersion"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceSets.main.java.srcDirs = ['game/src/', 'dungeon/src/', 'blockly/src/', "$projectDir/build/generated-src/"]
sourceSets.main.resources.srcDirs = ['game/assets/', 'dungeon/assets/', 'blockly/assets/']
sourceSets.test.resources.srcDirs = ['dungeon/assets/', 'game/test_resources', 'dungeon/test_resources']
sourceSets.test.java.srcDirs = ['game/test/', 'dungeon/test']
sourceSets.main.antlr.srcDirs = ['dungeon/src/dsl/antlr']

project.ext.mainClassName = 'starter.BasicStarter'
project.ext.assetsDir = new File('game/assets')

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

application {
    mainClass = project.mainClassName
}

tasks.register('runRandom', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'starter.RandomDungeon'
}

tasks.register('start', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'starter.Starter'
}

tasks.register('blockly', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'client.Client'
}

tasks.register('debug', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = project.mainClassName
    debug = true
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

spotless {
    java {
        targetExclude('build/generated-src/**')
        googleJavaFormat()
    }
}

// generate ANTLR visitor and listener classes from grammar:
generateGrammarSource {
    maxHeapSize = '64m'
    arguments += ['-visitor', '-listener']
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*module-info.class'
}

tasks.register('starterJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'starter/Starter'
    }

    archiveFileName = 'Starter.jar'

    from sourceSets.main.output

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*module-info.class'
}

// MANUAL TESTS:

tasks.register('runManualQuizTest', JavaExec) {
    mainClass = 'manual.quizquestion.QuizQuestionUITest'
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('runYesNoDialogTest', JavaExec) {
    mainClass = 'manual.YesNoDialogTest'
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('runCallbackTest', JavaExec) {
    mainClass = 'manual.quizquestion.CallbackTest'
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('runLoaderTest', JavaExec) {
    mainClass = 'manual.dslFileReader.DslFileReaderTest'
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('taskGenerationTest', JavaExec) {
    mainClass = 'manual.taskgeneration.TaskGenerationTest'
    classpath = sourceSets.test.runtimeClasspath
}

// Add default arguments to all JavaExec tasks:

tasks.withType(JavaExec).configureEach {
    dependsOn classes
    standardInput = System.in
    ignoreExitValue true
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        jvmArgs('-XstartOnFirstThread')
    }
}
