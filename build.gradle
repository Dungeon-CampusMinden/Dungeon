plugins {
    // we can not use ext variables here
    id "java"
    id "checkstyle"
    id "com.github.spotbugs" version "5.0.14"
    id "com.diffplug.spotless" version "6.18.0"
    id 'antlr'
}

// store name of method parameter names in .class files (used to build
// DSL-adapter types, which contain the names of the parameters as members)
tasks.withType(JavaCompile) {
    configure(options) {
        options.compilerArgs << '-parameters'
    }
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    gradlePluginPortal()
    google()
}

ext {
    // we can not use the + operator here
    gdxVersion = "1.11.0"
    aiVersion = "1.8.2"
    gsonVersion = "2.9.0"
    checkstyleVersion = "10.11.0"
}

dependencies {
    // LibGDX
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-ai:$aiVersion"

    // JUnit 4, Mockito and Powermock for testing:
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation "junit:junit:4.13.2"

    // https://mvnrepository.com/artifact/org.powermock/powermock-module-junit4
    testImplementation "org.powermock:powermock-module-junit4:2.0.9"
    // https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito2
    testImplementation "org.powermock:powermock-api-mockito2:2.0.9"

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: "com.google.code.gson", name: "gson", version: gsonVersion

    // ANTLR version 4 for DSL Grammar
    antlr "org.antlr:antlr4:4.11.1"
}

sourceCompatibility = 17
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
sourceSets.main.java.srcDirs = ["game/src/", "dungeon/src/", "blockly/src/", "$projectDir/build/generated-src/"]
sourceSets.main.resources.srcDirs = ["game/assets/"]
sourceSets.test.resources.srcDirs = ["dungeon/assets/", "game/test_resources", "dungeon/test_resources"]
sourceSets.test.java.srcDirs = ["game/test/","dungeon/test"]
sourceSets.main.antlr.srcDirs = ["dungeon/src/dsl/antlr"]

project.ext.mainClassName = "starter.Main"
project.ext.assetsDir = new File("game/assets")

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

task run(dependsOn: classes, type: JavaExec) {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

task start(dependsOn: classes, type: JavaExec) {
    mainClass = "starter.Starter"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

task blockly(dependsOn: classes, type: JavaExec) {
    mainClass = "client.Client"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

task debug(dependsOn: classes, type: JavaExec) {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    debug = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

task runManualQuizTest(dependsOn: classes, type: JavaExec) {
    mainClass = "manual.quizquestion.QuizQuestionUITest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

task runYesNoDialogTest(dependsOn: classes, type: JavaExec) {
    mainClass = "manual.YesNoDialogTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

task runCallbackTest(dependsOn: classes, type: JavaExec) {
    mainClass = "manual.quizquestion.CallbackTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

task runLoaderTest(dependsOn: classes, type: JavaExec) {
    mainClass = "manual.dslFileReader.DslFileReaderTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}

task taskGenerationTest(dependsOn: classes, type: JavaExec) {
    mainClass = "manual.taskgeneration.TaskGenerationTest"
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        allJvmArgs += ["-XstartOnFirstThread"]
    }
    doFirst {
        println(DefaultNativePlatform.currentOperatingSystem)
    }
}


test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

checkstyle {
    toolVersion = checkstyleVersion
    configFile = file("checks.xml")
    showViolations = true
}

spotbugs {
    ignoreFailures = true
    showStackTraces = false
    reportLevel = "low"
}

spotbugsMain {
    reports {
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = "fancy-hist.xsl"
        }
    }
}

spotbugsTest {
    reports {
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.xml")
        }
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = "fancy-hist.xsl"
        }
    }
}

spotless {
    java {
        targetExclude("build/generated-src/**")
        googleJavaFormat().aosp()
    }
}

// generate ANTLR visitor and listener classes from grammar
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-listener" ]
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', "META-INF/*module-info.class"
}

task starterJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': "starter/Starter"
    }

    archiveFileName = 'Starter.jar'

    from sourceSets.main.output

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', "META-INF/*module-info.class"
}


