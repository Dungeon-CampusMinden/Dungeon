buildscript {
    apply from: 'dependencies.gradle'
}


plugins {
    id 'com.diffplug.spotless' version "${spotlessVersion}"
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
        sourceCompatibility = JavaVersion.toVersion(21)
        targetCompatibility = JavaVersion.toVersion(21)
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    tasks.withType(JavaExec).configureEach {
        dependsOn classes
        standardInput = System.in
        ignoreExitValue true
        workingDir = rootProject.projectDir
        systemProperty 'BASELOGDIR', project.baseLogDir
        systemProperty 'BASEREFLECTIONDIR', project.baseReflectionDir
    }

    clean {
        delete project.baseLogDir
    }

    checkstyle {
        configFile = rootProject.file('.checkstyle.xml')
        // Default version vs. current version? The default version is quite old (9.3 from
        // Jan 30, 2022), so let's go with the current version (10.17).
        // However, this needs to be updated manually as Dependabot won't deal with this!
        toolVersion = '10.26.0'
        ignoreFailures = false
        maxWarnings = 0
    }

    // Generate an internal assets list for LibGDX (see https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/)
    tasks.register('generateInternalAssetsList') {
        group = 'assets'
        description = 'Generate a newline-separated list of internal asset files under assets/ (relative paths)'

        doLast {
            def outDir = file("$buildDir/generated-resources/assets")
            outDir.mkdirs()
            def outFile = new File(outDir, 'internal_assets.txt')

            def assetDirs = [] as Set
            def visitedProjects = [] as Set

            // Recursive function to collect assets from a project and its dependencies
            def collectAssets
            collectAssets = { proj ->
                if (proj in visitedProjects) return
                visitedProjects << proj

                // Add current project's assets dir
                def projAssetsDir = new File(proj.projectDir, 'assets')
                if (projAssetsDir.exists()) {
                    assetDirs << projAssetsDir
                }

                // Recursively collect from project dependencies
                proj.configurations.each { config ->
                    config.dependencies
                        .findAll { it instanceof ProjectDependency }
                        .each { collectAssets(it.dependencyProject) }
                }
            }

            // Start collection from this project
            collectAssets(project)

            def paths = []
            assetDirs.each { dir ->
                dir.eachFileRecurse { f ->
                    if (f.isFile()) {
                        def rel = dir.toPath().relativize(f.toPath()).toString().replace('\\', '/')
                        paths << rel
                    }
                }
            }

            paths = paths.unique().sort()
            outFile.text = paths.join(System.lineSeparator())
            println "Generated internal assets list with ${paths.size()} entries at: ${outFile}"
        }
    }

    // Ensure resource processing includes the generated list and that generation runs beforehand
    tasks.matching { it.name == 'processResources' }.configureEach {
        from("$buildDir/generated-resources/assets") {
            into('')
        }
        dependsOn tasks.named('generateInternalAssetsList')
    }

    // Make sure the list is generated before compilation as well (some builds expect resources ready early)
    tasks.withType(JavaCompile).configureEach {
        dependsOn tasks.named('generateInternalAssetsList')
    }
}


spotless {
    java {
        targetExclude('build/generated-src/**')
        googleJavaFormat()

        target '**/*.java'
    }
}
