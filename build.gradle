buildscript {
    apply from: 'dependencies.gradle'
}

plugins {
    // we can not use ext variables here
    id "java"
    id "com.diffplug.spotless" version "6.23.3"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

<<<<<<< HEAD
<<<<<<< HEAD
dependencies {
    // LibGDX
    implementation supportDependencies.gdx
    implementation supportDependencies.gdx_freetype
    implementation supportDependencies.gdx_backend_lwjgl3
    implementation supportDependencies.gdx_lwjgl3_glfw_awt_macos
    implementation supportDependencies.gdx_platform
    implementation supportDependencies.gdx_freetype_platform
    implementation supportDependencies.gdx_ai
=======
def gdxVersion = '1.12.1'
def aiVersion = '1.8.2'
def junitVersion = '4.13.2'
def mockitoVersion = '5.8.0'
def antlrVersion = '4.13.1'
def gsonVersion = '2.10.1'
>>>>>>> 1234030e (Split Project into Subprojects)
=======
subprojects {
    ext {
        gdxVersion = '1.12.1'
        aiVersion = '1.8.2'
        junitVersion = '4.13.2'
        mockitoVersion = '5.8.0'
        antlrVersion = '4.13.1'
        gsonVersion = '2.10.1'
    }
}
>>>>>>> 0cfcb52c (Version variables)

dependencies {}

<<<<<<< HEAD
    // JUnit 4 and Mockito for testing
    testImplementation supportDependencies.junit
    testImplementation supportDependencies.mockito_core

    // ANTLR version 4 for DSL Grammar
    antlr supportDependencies.antlr
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceSets.main.java.srcDirs = ['game/src/', 'dungeon/src/', 'blockly/src/', "$projectDir/build/generated-src/"]
sourceSets.main.resources.srcDirs = ['game/assets/', 'dungeon/assets/', 'blockly/assets/']
sourceSets.test.resources.srcDirs = ['dungeon/assets/', 'game/test_resources', 'dungeon/test_resources']
sourceSets.test.java.srcDirs = ['game/test/', 'dungeon/test']
sourceSets.main.antlr.srcDirs = ['dungeon/src/dsl/antlr']

application {
    mainClass = 'starter.BasicStarter'
}

tasks.register('runRandom', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'starter.RandomDungeon'
}

tasks.register('start', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'starter.Starter'
}

tasks.register('blockly', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'client.Client'
}

tasks.register('debug', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'starter.BasicStarter'
    debug = true
}
=======
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
>>>>>>> 1234030e (Split Project into Subprojects)

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

spotless {
    java {
        targetExclude('build/generated-src/**')
        googleJavaFormat()
    }
}
<<<<<<< HEAD

// generate ANTLR visitor and listener classes from grammar:
generateGrammarSource {
    maxHeapSize = '64m'
    arguments += ['-visitor', '-listener']
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'starter.BasicStarter'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*module-info.class'
}

tasks.register('starterJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'starter/Starter'
    }

    archiveFileName = 'Starter.jar'

    from sourceSets.main.output

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*module-info.class'
}

// MANUAL TESTS:

tasks.register('runManualQuizTest', JavaExec) {
    mainClass = 'manual.quizquestion.QuizQuestionUITest'
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('runYesNoDialogTest', JavaExec) {
    mainClass = 'manual.YesNoDialogTest'
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('runCallbackTest', JavaExec) {
    mainClass = 'manual.quizquestion.CallbackTest'
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('runLoaderTest', JavaExec) {
    mainClass = 'manual.dslFileReader.DslFileReaderTest'
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register('taskGenerationTest', JavaExec) {
    mainClass = 'manual.taskgeneration.TaskGenerationTest'
    classpath = sourceSets.test.runtimeClasspath
}

// Add default arguments to all JavaExec tasks:

tasks.withType(JavaExec).configureEach {
    dependsOn classes
    standardInput = System.in
    ignoreExitValue true
}
=======
>>>>>>> 1234030e (Split Project into Subprojects)
